//================= Hercules Database =====================================
//=       _   _                     _
//=      | | | |                   | |
//=      | |_| | ___ _ __ ___ _   _| | ___  ___
//=      |  _  |/ _ \ '__/ __| | | | |/ _ \/ __|
//=      | | | |  __/ | | (__| |_| | |  __/\__ \
//=      \_| |_/\___|_|  \___|\__,_|_|\___||___/
//================= License ===============================================
//= This file is part of Hercules.
//= http://herc.ws - http://github.com/HerculesWS/Hercules
//=
//= Copyright (C) 2021-2024 Hercules Dev Team
//= Copyright (C) 2021-2022 Asheraf
//=
//= Hercules is free software: you can redistribute it and/or modify
//= it under the terms of the GNU General Public License as published by
//= the Free Software Foundation, either version 3 of the License, or
//= (at your option) any later version.
//=
//= This program is distributed in the hope that it will be useful,
//= but WITHOUT ANY WARRANTY; without even the implied warranty of
//= MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//= GNU General Public License for more details.
//=
//= You should have received a copy of the GNU General Public License
//= along with this program.  If not, see <http://www.gnu.org/licenses/>.
//=========================================================================

enchant_db: (
/**************************************************************************
 ************* Entry structure ********************************************
 **************************************************************************
{
	// ================ Mandatory fields ==============================
	Id:                                  (int) The ID for the enchanting group.
	TargetItems: [ "Item_Const" ]        (string, array) An array of target items.
	SlotOrder: []                        (int, array) An array with enchanting slots order
											also used to determine the maximum amount of possible enchants.
	// ================ Optional fields ===============================
	MinRefine:                  (int, defaults to 0) The minimum refine required for TargetItems.
	MinGrade:                   (int, defaults to 0) The minimum grade required for TargetItems.
	AllowRandomOptions:         (bool, defaults to false) Whether to accept TargetItems with random options.
	ResetInfo: {
		Rate:                   (int, defaults to 0) Enchant reset success rate from 1 to 100000 (0.001% - 100%)
		Zeny:                   (int, defaults to 0) The minimum refine required for TargetItems.
		Materials: {
			<Item_Const>: <amount>      (string, int)
			...
		}
	}
	SlotInfo: (
	{
		SlotId:                   (int, defaults to 0) Slot id of the group
		SuccessRate:              (int, defaults to 0) Success rate from 1 to 100000 (0.001% - 100%)
		GradeBonus: {
			Grade<ID>: <Bonus>    (string, int) Success rate bonus based on grade level
		},
		NormalEnchants: {
			Zeny:                 (int, defaults to 0) Zeny amount required for enchanting.
			Materials: {          List of items required for enchanting.
				<Item_Const>: <amount>       (string, int)
				...
			},
			ItemList: {
				Grade<ID>: {
					<Item_Const>: <Rate>     (string, int)
					...
				}
			}
		},
		PerfectEnchants: {
			<BaseItem>: {
				Zeny:             (int, defaults to 0) Zeny amount required for enchanting.
				Materials: {      List of items required for enchanting.
					<Item_Const>: <amount>   (string, int)
					...
				}
			}
		},
		UpgradeInfo: {
			<Base_Item_Const>: {
				ResultItem:        (string) Item constant of the result upgrade item
				Zeny:              (int, defaults to 0) Zeny amount required for enchant upgrade.
				Materials: {       List of items required for enchant upgrade.
					<Item_Const>: <amount>   (string, int)
					...
				}
			}
		}
	}
	... up to MAX_SLOTS
	)
}
**************************************************************************/
)
